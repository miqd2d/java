ðŸ”¥ FULL VIVA SET - Java Programming

---

# 1. BASICS â€” (10 Questions)

> *Q1:* What is the difference between compile-time and runtime errors?  
> *A1:*  
- *Compile-time errors* occur during code compilation (syntax errors).  
- *Runtime errors* occur while the program is running (e.g., division by zero).

> *Q2:* What is bytecode in Java?  
> *A2:*  
- Intermediate code generated by the Java compiler (.class file) that the JVM executes.

> *Q3:* Why is Java called strongly typed?  
> *A3:*  
- Because each variable must have a declared data type.

> *Q4:* What is the role of the main() method in Java?  
> *A4:*  
- It is the entry point for the Java program execution.

> *Q5:* What is autoboxing and unboxing?  
> *A5:*  
- *Autoboxing:* Converting primitive to wrapper class automatically.  
- *Unboxing:* Converting wrapper class to primitive automatically.

> *Q6:* What is a package in Java?  
> *A6:*  
- A collection of related classes and interfaces grouped together.

> *Q7:* What is the default value of a boolean and an int in Java?  
> *A7:*  
- boolean â†’ false, int â†’ 0.

> *Q8:* What is a static block?  
> *A8:*  
- A block of code inside a class that runs once when the class is loaded.

> *Q9:* Can we overload the main method?  
> *A9:*  
- Yes, but JVM only calls the standard main(String[] args).

> *Q10:* What is final keyword?  
> *A10:*  
- Used to declare constants, prevent inheritance, or prevent method overriding.

---

*Code Snippet:*  
java
class Test {
    static {
        System.out.println("Static Block");
    }
    public static void main(String[] args) {
        System.out.println("Main Method");
    }
}

*Output:*  

Static Block
Main Method


---

# 2. LOOPS â€” (8 Questions)

> *Q1:* Can we use a loop inside another loop? What is it called?  
> *A1:*  
- Yes, itâ€™s called a *nested loop*.

> *Q2:* Difference between break and continue?  
> *A2:*  
- break: Exits the loop.  
- continue: Skips current iteration and moves to next.

> *Q3:* When do we prefer infinite loops?  
> *A3:*  
- For servers, background services, game loops, etc.

> *Q4:* Write a for loop to print even numbers from 1 to 10.  
> *A4:*  
java
for(int i=2; i<=10; i+=2) {
    System.out.println(i);
}


> *Q5:* Can a for-loop be infinite? How?  
> *A5:*  
- Yes, for(;;) is an infinite loop.

> *Q6:* Which loop is best if you don't know how many times to repeat?  
> *A6:*  
- while loop.

> *Q7:* Can we use multiple variables in a for loop?  
> *A7:*  
- Yes, separated by commas (,).

> *Q8:* How do you exit from all nested loops?  
> *A8:*  
- Using a labeled break.

---

*Code Snippet:*  
java
for(int i=0; i<3; i++) {
    for(int j=0; j<2; j++) {
        System.out.print(i + "" + j + " ");
    }
}

*Output:*  

00 01 10 11 20 21 


---

# 3. CONDITIONS â€” (6 Questions)

> *Q1:* Can we use switch with enums?  
> *A1:*  
- Yes.

> *Q2:* What is the maximum number of conditions an if-else if can have?  
> *A2:*  
- No limit.

> *Q3:* Can switch-case have duplicate case labels?  
> *A3:*  
- No, it causes compile-time error.

> *Q4:* Can we put logical operators inside if?  
> *A4:*  
- Yes (&&, ||, !).

> *Q5:* What happens if no case matches in switch and no default is present?  
> *A5:*  
- Nothing happens; the switch exits.

> *Q6:* Can a switch expression be null?  
> *A6:*  
- No, it will throw a NullPointerException.

---

*Code Snippet:*  
java
int x = 3;
switch(x) {
    case 1: System.out.println("One");
    case 2: System.out.println("Two");
    case 3: System.out.println("Three");
    default: System.out.println("Default");
}

*Output:*  

Three
Default

(Because no break)

---

# 4. FUNCTIONS â€” (6 Questions)

> *Q1:* What is recursion?  
> *A1:*  
- A function calling itself.

> *Q2:* Difference between pass-by-value and pass-by-reference?  
> *A2:*  
- Java is strictly *pass-by-value* (even objects, reference is passed by value).

> *Q3:* Can we return multiple values from a function?  
> *A3:*  
- No directly, but we can return an object or an array.

> *Q4:* Can we declare a method inside another method?  
> *A4:*  
- No, Java doesn't allow nested methods.

> *Q5:* Why use method overloading?  
> *A5:*  
- To increase readability by performing similar operations with different input types.

> *Q6:* Can constructors be overloaded?  
> *A6:*  
- Yes.

---

*Code Snippet:*  
java
void fun(int a) {
    System.out.println(a);
}
void fun(double a) {
    System.out.println(a);
}

(Overloading example)

---

# 5. OOPS â€” (10 Questions)

> *Q1:* What is polymorphism?  
> *A1:*  
- Same operation, different behavior (overloading + overriding).

> *Q2:* Difference between early binding and late binding?  
> *A2:*  
- Early Binding (compile time): method overloading.  
- Late Binding (runtime): method overriding.

> *Q3:* What is constructor chaining?  
> *A3:*  
- Calling one constructor from another within the same class.

> *Q4:* What is encapsulation?  
> *A4:*  
- Wrapping data and methods into a single unit (class).

> *Q5:* What is the difference between this and super?  
> *A5:*  
- this refers to current class object.  
- super refers to parent class.

> *Q6:* Can an abstract class have constructors?  
> *A6:*  
- Yes.

> *Q7:* What happens if a class implements an interface but doesn't define all methods?  
> *A7:*  
- It must be declared abstract.

> *Q8:* Can interfaces have variables?  
> *A8:*  
- Yes, but they are public static final by default.

> *Q9:* What is IS-A and HAS-A relationship?  
> *A9:*  
- IS-A: Inheritance.  
- HAS-A: Composition.

> *Q10:* What is marker interface?  
> *A10:*  
- Interface with no methods (example: Serializable).

---

*Code Snippet:*  
java
class A {
    A() { System.out.println("A"); }
}
class B extends A {
    B() { System.out.println("B"); }
}
class Test {
    public static void main(String[] args) {
        B obj = new B();
    }
}

*Output:*  

A
B

(Constructor chaining)

---

# 6. MULTITHREADING â€” (8 Questions)

> *Q1:* What is thread priority?  
> *A1:*  
- Importance assigned to a thread (range 1 to 10).

> *Q2:* What is the default priority?  
> *A2:*  
- 5 (NORM_PRIORITY).

> *Q3:* How to make a thread sleep?  
> *A3:*  
- Thread.sleep(milliseconds).

> *Q4:* What is deadlock?  
> *A4:*  
- Two or more threads waiting indefinitely for each otherâ€™s resources.

> *Q5:* What is thread pooling?  
> *A5:*  
- Reusing a fixed number of threads to execute multiple tasks.

> *Q6:* Difference between wait() and sleep()?  
> *A6:*  
- wait() releases the lock; sleep() does not.

> *Q7:* How to make a thread daemon?  
> *A7:*  
- thread.setDaemon(true); before starting the thread.

> *Q8:* Can we start a thread twice?  
> *A8:*  
- No, it throws IllegalThreadStateException.

---

*Code Snippet:*  
java
class Test extends Thread {
    public void run() {
        System.out.println("Thread running");
    }
    public static void main(String[] args) {
        Test t = new Test();
        t.start();
        t.start();
    }
}

*Output:*  
- *Exception:* IllegalThreadStateException

---

# 7. EXCEPTION HANDLING â€” (6 Questions)

> *Q1:* What is the base class for all exceptions?  
> *A1:*  
- Throwable.

> *Q2:* What is a custom exception?  
> *A2:*  
- User-defined exception class extending Exception or RuntimeException.

> *Q3:* Can we catch multiple exceptions together?  
> *A3:*  
- Yes, using multi-catch (catch(Exception1 | Exception2 e)).

> *Q4:* Difference between throw and throws?  
> *A4:*  
- throw: Used to *throw* an exception.  
- throws: Used to *declare* an exception.

> *Q5:* What happens if an exception is not caught?  
> *A5:*  
- JVM terminates the program and prints a stack trace.

> *Q6:* Can we write only finally without catch?  
> *A6:*  
- Yes.

---

# 8. COLLECTION FRAMEWORK â€” (8 Questions)

> *Q1:* Which collection is thread-safe?  
> *A1:*  
- Vector, Hashtable, Collections.synchronizedList().

> *Q2:* Difference between HashSet and TreeSet?  
> *A2:*  
- HashSet: Unordered.  
- TreeSet: Sorted (natural order).

> *Q3:* Difference between HashMap and Hashtable?  
> *A3:*  
- HashMap: Not synchronized.  
- Hashtable: Synchronized.

> *Q4:* Can a List contain null values?  
> *A4:*  
- Yes.

> *Q5:* Can a Map have null keys?  
> *A5:*  
- HashMap allows one null key, Hashtable does not.

> *Q6:* What is Iterator?  
> *A6:*  
- Interface used to traverse collections.

> *Q7:* What is ConcurrentHashMap?  
> *A7:*  
- Thread-safe version of HashMap without locking the whole map.

> *Q8:* What is PriorityQueue?  
> *A8:*  
- Queue where elements are ordered by natural ordering or custom comparator.

---

# 9. SWING, SERVLETS, MYSQL CONNECTION â€” (8 Questions)

> *Q1:* What is JFrame?  
> *A1:*  
- Top-level container in Swing.

> *Q2:* What is ActionListener?  
> *A2:*  
- Interface to handle button clicks and other actions.

> *Q3:* Life cycle methods of a servlet?  
> *A3:*  
- init(), service(), destroy().

> *Q4:* What is RequestDispatcher?  
> *A4:*  
- Forward a request from one servlet to another.

> *Q5:* What is JDBC?  
> *A5:*  
- Java API to connect and execute queries on a database.

> *Q6:* What is ResultSet?  
> *A6:*  
- Table of data representing a database result set.

> *Q7:* How to load a driver in JDBC?  
> *A7:*  
java
Class.forName("com.mysql.cj.jdbc.Driver");


> *Q8:* Difference between Statement and PreparedStatement?  
> *A8:*  
- PreparedStatement is precompiled and safe against SQL injection.